/* eslint-disable no-console */
import { Server } from 'http';
import mongoose from 'mongoose';
import app from './app';
import config from './app/config';

let server: Server | null = null;

// Database connection function
async function connectToDatabase() {
  try {
    await mongoose.connect(config.database_url as string);
    console.log('тЬЕ Database connected successfully!  ЁЯЫв');
  } catch (err) {
    console.error('Failed to connect to database:', err);
    process.exit(1); // Database ржХрж╛ржирзЗржХрзНржЯрзЗржб ржирж╛ ржерж╛ржХрж▓рзЗ ржЕрзНржпрж╛ржк ржЪрж╛рж▓рж╛ржирзЛрж░ ржжрж░ржХрж╛рж░ ржирзЗржЗ, рждрж╛ржЗ ржЕрзНржпрж╛ржк ржмржирзНржз ржХрж░рзЗ ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
  }
}

// Graceful shutdown function to close the server properly
function gracefulShutdown(signal: string) {
  console.log(`Received ${signal}. Closing server... ЁЯд╖тАНтЩВя╕П `);
  if (server) {
    server.close(() => {
      console.log('Server closed gracefully! тЬЕ');
      process.exit(0); // рж╕ржмржХрж┐ржЫрзБ ржарж┐ржХржарж╛ржХ ржмржирзНржз рж╣рж▓рзЗ ржЕрзНржпрж╛ржк рж╕ржорзНржкрзВрж░рзНржгржнрж╛ржмрзЗ ржмржирзНржз ржХрж░рзЗ ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
    });
  } else {
    process.exit(0);
  }
}

// Application bootstrap function
async function main() {
  try {
    await connectToDatabase();
    // Seed function (ржЕржкрж╢ржирж╛рж▓, ржкрзНрж░рзЯрзЛржЬржирзЗ ржЪрж╛рж▓рзБ ржХрж░рзБржи)
    // await seed();

    server = app.listen(config.port, () => {
      console.log(`ЁЯЪА Application is running on port ${config.port}!  тЬи  тЪб`);
    });

    // Listen for OS termination signals (Ctrl+C or server stop)
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Handling uncaught exceptions (ржпржжрж┐ ржХрзЛржбрзЗ ржХрзЛржирзЛ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд ржнрзБрж▓ рж╣рзЯ)
    process.on('uncaughtException', (error) => {
      console.error('ЁЯШИ Uncaught Exception:', error);
      // рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж▓ржЫрзЗ, рждрж╛ржЗ ржЕрзНржпрж╛ржк ржмржирзНржз ржХрж░рзЗ ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      gracefulShutdown('uncaughtException');
    });

    // Handling unhandled promise rejections (ржпржжрж┐ ржХрзЛржирзЛ ржкрзНрж░ржорж┐рж╕ рж░рж┐ржЬрзЗржХрзНржЯ рж╣рзЯ ржХрж┐ржирзНрждрзБ ржХрзНржпрж╛ржЪ ржХрж░рж╛ ржирж╛ рж╣рзЯ)
    process.on('unhandledRejection', (error) => {
      console.error('ЁЯШИ Unhandled Rejection:', error);
      // рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж▓ржЫрзЗ, рждрж╛ржЗ ржЕрзНржпрж╛ржк ржмржирзНржз ржХрж░рзЗ ржжрзЗржУрзЯрж╛ рж╣ржЪрзНржЫрзЗ
      gracefulShutdown('unhandledRejection');
    });
  } catch (error) {
    console.error('ЁЯШИ Error during bootstrap:', error);
    // ржпржжрж┐ рж╕рж╛рж░рзНржнрж╛рж░ ржЪрж╛рж▓рзБ ржирж╛ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржЕрзНржпрж╛ржк рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ ржмржирзНржз ржХрж░рзЗ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗ
    process.exit(1);
  }
}

main();
